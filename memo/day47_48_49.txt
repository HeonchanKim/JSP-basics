[jsp 방식]
	a.jsp  --> b.jsp  --> c.jsp

	각 페이지마다 필요시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp 파일 안에서 모두 작성된다.
	분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식이며 코드가 확장될 수록 가독성이 떨어지고
	분업과 유지보수가 좋지 않다.

소프트웨어 디자인 설계 패턴

MVC
	Model : 데이터 조회 결과값을 저장할 객체(VO, DTO)
	View : 화면(html, jsp, css, js,...)
	Controller : 데이터베이스에 접근할 수 있는 코드가 담긴 객체(DAO)

[model1 방식]
	a.jsp  --> b.jsp --> c.jsp
		↕
		DAO.java

	b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다. 선언은 분리되어 java페이지에 구현이 되기 때문에
	jsp내의 java코드 양이 줄어들지만 결국 사용은 jsp페이지에서 하기 때문에 Controller와 View가 섞이게 된다.
	페이지가 확장될 수록 유지보수가 상대적으로 좋지 않지만 설계는 쉽다.


[model2 방식]
	a.jsp  --> web.xml  --> Front-Controller.java ----------------------> c.jsp
				↓↑
			      Controller.java
				↓↑
			         DAO.java
				↓↑	
				DB

















